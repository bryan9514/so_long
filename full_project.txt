# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/04/03 15:57:57 by brturcio          #+#    #+#              #
#    Updated: 2025/04/25 15:17:19 by brturcio         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME		:= so_long
CC			:= cc
CFLAGS		:= -Wall -Wextra -Werror -g

SRC_DIR		:= src
OBJ_DIR		:= obj
SRC			:= $(wildcard $(SRC_DIR)/*.c)
OBJ			:= $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRC))

LIBFT_DIR	:= libraries/libft
MLX42_DIR	:= libraries/MLX42

LIBFT		:= $(LIBFT_DIR)/libft.a
MLX42_LIB	:= $(MLX42_DIR)/build/libmlx42.a

INCLUDES	:= -I$(LIBFT_DIR)/inc -I$(MLX42_DIR)/include -Iinc

LIBS		:= $(LIBFT) $(MLX42_LIB)
MLX_FLAGS	:= -ldl -lglfw -lm -lX11 -pthread

all: $(LIBFT) $(MLX42_LIB) $(NAME)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(OBJ_DIR)
	@$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

$(NAME): $(OBJ)
	@$(CC) $(CFLAGS) $(OBJ) $(LIBS) $(MLX_FLAGS) -o $@
	@echo "✅ Compilation completed: $(NAME)"

$(LIBFT):
	@if [ ! -f $@ ]; then \
		$(MAKE) -s -C $(LIBFT_DIR); \
	fi

$(MLX42_LIB):
	@if [ ! -f $@ ]; then \
		cmake -B $(MLX42_DIR)/build -S $(MLX42_DIR) > /dev/null 2>&1 && \
		$(MAKE) -s -C $(MLX42_DIR)/build -j4 > /dev/null 2>&1; \
		echo "✅ Library created : MLX42";\
	fi

clean:
	@rm -rf $(OBJ_DIR)
	@$(MAKE) -s -C $(LIBFT_DIR) clean
	@rm -rf $(MLX42_DIR)/build
	@echo "✅ clean so_long done."

fclean: clean
	@rm -f $(NAME)
	@$(MAKE) -s -C $(LIBFT_DIR) fclean
	@echo "✅ fclean so_long done."

re: fclean all

.PHONY: all clean fclean re libft mlx
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_game_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/20 21:07:26 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/22 17:13:48 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	window_size(t_game *game, char **map)
{
	int	lin;
	int	col;

	lin = 0;
	col = ft_strlen(map[0]);
	while (map[lin])
		lin++;
	game->width = (col * TILE_SIZE);
	game->height = (lin * TILE_SIZE);
	game->map_rows = lin;
	game->map_cols = col;
}

int	count_collec(char **map)
{
	int	count;
	int	y;
	int	x;

	y = 0;
	count = 0;
	while (map[y])
	{
		x = 0;
		while (map[y][x])
		{
			if (map[y][x] == 'C')
				count++;
			x++;
		}
		y++;
	}
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   render_map.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 07:21:57 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 10:04:29 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	render_map2(t_game *game, char cel, int x, int y)
{
	mlx_image_to_window(game->mlx, game->img_floor, x, y);
	if (cel == '1')
		mlx_image_to_window(game->mlx, game->img_wall, x, y);
	else if (cel == 'P')
		mlx_image_to_window(game->mlx, game->img_player, x, y);
	else if (cel == 'E')
		mlx_image_to_window(game->mlx, game->img_door, x, y);
	else if (cel == 'C')
		mlx_image_to_window(game->mlx, game->img_collec, x, y);
}

void	render_map(t_game *game)
{
	int		x;
	int		y;
	int		x_size_img;
	int		y_size_img;
	char	cel;

	y = 0;
	while (y < game->map_rows)
	{
		x = 0;
		while (x < game->map_cols)
		{
			cel = game->map[y][x];
			x_size_img = x * TILE_SIZE;
			y_size_img = y * TILE_SIZE;
			render_map2(game, cel, x_size_img, y_size_img);
			x++;
		}
		y++;
	}
}

void	search_player(t_game *game)
{
	int		x;
	int		y;
	char	cel;

	y = 0;
	while (y < game->map_rows)
	{
		x = 0;
		while (x < game->map_cols)
		{
			cel = game->map[y][x];
			if (cel == 'P')
			{
				game->player_y = y;
				game->player_x = x;
				return ;
			}
			x++;
		}
		y++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   copy_map_for_flood.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/19 19:27:05 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 09:30:10 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

char	**copy_map(char **map)
{
	int		i;
	char	**map_copy;

	i = 0;
	map_copy = NULL;
	while (map[i])
		i++;
	map_copy = malloc(sizeof(char *) * (i + 1));
	if (!map_copy)
		return (NULL);
	i = 0;
	while (map[i])
	{
		map_copy[i] = ft_strdup(map[i]);
		if (!map_copy[i])
		{
			while (--i >= 0)
				free(map_copy[i]);
			free(map_copy);
			return (NULL);
		}
		i++;
	}
	map_copy[i] = NULL;
	return (map_copy);
}

void	flood_fill(char **map, int x, int y)
{
	if (y < 0 || x < 0 || map[y] == NULL || map[y][x] == '\0')
		return ;
	if (map[y][x] == '1' || map[y][x] == 'F' || map[y][x] == 'E')
		return ;
	map[y][x] = 'F';
	flood_fill(map, x + 1, y);
	flood_fill(map, x - 1, y);
	flood_fill(map, x, y + 1);
	flood_fill(map, x, y - 1);
}

int	find_player(char **map, int *player_x, int *player_y)
{
	int	i;
	int	j;

	i = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			if (map[i][j] == 'P')
			{
				*player_x = j;
				*player_y = i;
				return (1);
			}
			j++;
		}
		i++;
	}
	return (0);
}

int	has_remainig(char **map, char character)
{
	int	i;
	int	j;

	i = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			if (map[i][j] == character)
				return (1);
			j++;
		}
		i++;
	}
	return (0);
}

int	verify_path(char **map)
{
	int		player_x;
	int		player_y;
	char	**map_copy;

	map_copy = NULL;
	if (!find_player(map, &player_x, &player_y))
		free_map_print_error(map, NULL, NULL, "player not found");
	map_copy = copy_map(map);
	if (!map_copy)
		free_map_print_error(map, NULL, NULL, "copy_map failed");
	flood_fill(map_copy, player_x, player_y);
	if (has_remainig(map_copy, 'C'))
	{
		free_map(map_copy);
		return (0);
	}
	free_map(map_copy);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/03 15:55:14 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 09:31:17 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	init_game_struct(t_game *game)
{
	game->mlx = NULL;
	game->map = NULL;
	game->width = 0;
	game->height = 0;
	game->map_rows = 0;
	game->map_cols = 0;
	game->player_x = 0;
	game->player_y = 0;
	game->coins = 0;
	game->collected = 0;
	game->moves = 0;
	game->img_wall = NULL;
	game->img_floor = NULL;
	game->img_player = NULL;
	game->img_door = NULL;
	game->img_collec = NULL;
	game->texture = NULL;
	game->image = NULL;
}

int	main(int ac, char **av)
{
	char	**map;
	t_game	game;

	init_game_struct(&game);
	check_args(ac, av);
	map = read_map(av[1]);
	if (!validate_size_lines_map(map))
		free_map_print_error(map, NULL, NULL, \
			"Error : Invalid size map");
	validate_elements_map(map);
	if (!init_game(map, &game))
	{
		end_game(&game);
		free_map_print_error(NULL, NULL, NULL, \
			"Error: Failed to initialize");
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   map_validation.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 10:00:17 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/23 17:55:13 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	validate_size_lines_map(char **map)
{
	int		i;
	size_t	line_refe;

	if (!map || !map[0])
		return (0);
	i = 1;
	line_refe = ft_strlen(map[0]);
	while (map[i])
	{
		if (ft_strlen(map[i]) != line_refe)
			return (0);
		i++;
	}
	if (line_refe > 49)
		return (0);
	if (i > 50)
		return (0);
	return (1);
}

int	validate_wall_map(char **map)
{
	int	i;
	int	j;
	int	last;
	int	len;

	i = 1;
	last = 0;
	while (map[last])
		last++;
	j = 0;
	while (map[0][j])
		if (map[0][j++] != '1')
			return (0);
	while (i < (last - 1))
	{
		len = ft_strlen(map[i]);
		if (map[i][0] != '1' || map[i][len - 1] != '1')
			return (0);
		i++;
	}
	j = 0;
	while (map[last - 1][j])
		if (map[last - 1][j++] != '1')
			return (0);
	return (1);
}

int	check_valid_chars(char **map)
{
	int	i;
	int	j;

	i = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			if (map[i][j] != '1' && map[i][j] != '0' && map[i][j] != 'C' && \
				map[i][j] != 'P' && map[i][j] != 'E')
				return (0);
			j++;
		}
		i++;
	}
	return (1);
}

void	check_required_elements(char **map, int *c, int *p, int *e)
{
	int	i;
	int	j;

	i = 0;
	while (map[i])
	{
		j = 0;
		while (map[i][j])
		{
			if (map[i][j] == 'C')
				(*c)++;
			if (map[i][j] == 'P')
				(*p)++;
			if (map[i][j] == 'E')
				(*e)++;
			j++;
		}
		i++;
	}
}

int	validate_elements_map(char **map)
{
	int	count_c;
	int	count_p;
	int	count_e;

	count_c = 0;
	count_p = 0;
	count_e = 0;
	if (!validate_wall_map(map))
		free_map_print_error(map, NULL, NULL, "Error : Invalid wall");
	if (!check_valid_chars(map))
		free_map_print_error(map, NULL, NULL, "Error : Invalid characters");
	check_required_elements(map, &count_c, &count_p, &count_e);
	if (count_p < 1)
		free_map_print_error(map, NULL, NULL, "Error : Missing player");
	if (count_p > 1)
		free_map_print_error(map, NULL, NULL, "Error : Too many players");
	if (count_e < 1)
		free_map_print_error(map, NULL, NULL, "Error : Missing exit");
	if (count_e > 1)
		free_map_print_error(map, NULL, NULL, "Error : Too many exits");
	if (count_c < 1)
		free_map_print_error(map, NULL, NULL, "Erro : Missing collectible");
	if (!verify_path(map))
		free_map_print_error(map, NULL, NULL, "Error : Unreachable elements");
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_game.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/20 10:01:43 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/25 18:17:26 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	init_game(char **map, t_game *game)
{
	game->moves = 0;
	game->collected = 0;
	game->coins = count_collec(map);
	window_size(game, map);
	game->map = map;
	if (!init_window(game))
		return (0);
	if (!load_rscs(game))
		return (0);
	render_map(game);
	search_player(game);
	mlx_key_hook(game->mlx, my_keyhook, game);
	mlx_loop(game->mlx);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   read_maps.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/15 09:19:38 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 09:31:06 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	open_map_file(char *filename)
{
	int	fd;

	fd = open(filename, O_RDONLY);
	if (fd < 0)
		free_map_print_error(NULL, NULL, NULL, "File does not exist");
	return (fd);
}

t_list	*read_lines_into_list(int fd)
{
	t_list	*lines;
	t_list	*new_node;
	char	*line;
	char	*clean_line;

	lines = NULL;
	line = get_next_line(fd);
	while (line)
	{
		clean_line = ft_strtrim(line, "\r\n");
		free(line);
		if (!clean_line)
			free_map_print_error(NULL, lines, NULL, "ft_strtrim failed");
		new_node = ft_lstnew(clean_line);
		if (!new_node)
			free_map_print_error(NULL, lines, clean_line, "ft_lstnew failed");
		ft_lstadd_back(&lines, new_node);
		line = get_next_line(fd);
	}
	close(fd);
	return (lines);
}

char	**convert_list_to_array(t_list *lines)
{
	int		i;
	int		map_size;
	char	**map;
	t_list	*tmp;

	map_size = ft_lstsize(lines);
	map = malloc(sizeof(char *) * (map_size + 1));
	if (!map)
		free_map_print_error(NULL, NULL, NULL, "Failed malloc");
	tmp = lines;
	i = 0;
	while (tmp)
	{
		map[i++] = tmp->content;
		tmp = tmp->next;
	}
	map[i] = NULL;
	free_list(lines);
	return (map);
}

int	validate_map_not_empty(char **map)
{
	if (!map || !map[0] || map[0][0] == '\0')
		return (0);
	return (1);
}

char	**read_map(char *av)
{
	int		fd;
	t_list	*lines;
	char	**map;

	fd = open_map_file(av);
	lines = read_lines_into_list(fd);
	map = convert_list_to_array(lines);
	if (!validate_map_not_empty(map))
		free_map_print_error(map, NULL, NULL, "Empty map");
	return (map);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   check_args.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 14:59:51 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/23 18:29:05 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

int	check_file_extension(char *filename)
{
	size_t		len;

	len = ft_strlen(filename);
	if (len < 4)
		return (1);
	return (ft_strncmp(filename + len - 4, ".ber", 4));
}

int	check_args(int ac, char **av)
{
	if (ac != 2)
		free_map_print_error(NULL, NULL, NULL, "Error : Syntax : \
./so_long  map_name.ber");
	if (check_file_extension(av[1]))
		free_map_print_error(NULL, NULL, NULL, "Error : No valid \
extension map");
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init_window.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 07:22:49 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 09:55:13 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	close_hook(void *param)
{
	t_game	*game;

	game = (t_game *)param;
	end_game(game);
}

void	end_game(t_game *game)
{
	free_image(game);
	if (game->map)
		free_map(game->map);
	if (game->mlx)
	{
		mlx_close_window(game->mlx);
		mlx_terminate(game->mlx);
	}
	ft_printf("Game closed\n");
	exit(0);
}

int	init_window(t_game *game)
{
	mlx_set_setting(MLX_STRETCH_IMAGE, true);
	game->mlx = mlx_init(game->width, game->height, "so_long", true);
	if (!game->mlx)
		return (0);
	mlx_close_hook(game->mlx, close_hook, game);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   key_movement.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 11:42:43 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 10:04:44 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	change_cell(t_game *game, int new_x, int new_y)
{
	game->collected++;
	game->map[new_y][new_x] = '0';
}

int	verify_end(t_game *game, char dest)
{
	if (dest == 'E')
	{
		if (game->collected == game->coins)
		{
			ft_printf(GREEN"🎉 ¡YOU WIN IN %d MOVEMENTS!\n"RESET, game->moves);
			end_game(game);
		}
		else
		{
			ft_printf(CYAN"🚪 THE DOOR IS CLOSED 🎃\n"RESET);
			return (1);
		}
	}
	return (0);
}

void	move_player(t_game *game, int dx, int dy)
{
	int		new_y;
	int		new_x;
	char	dest;

	new_y = game->player_y + dy;
	new_x = game->player_x + dx;
	dest = game->map[new_y][new_x];
	if (dest == '1')
		return ;
	if (dest == 'C')
		change_cell(game, new_x, new_y);
	if (verify_end(game, dest))
		return ;
	mlx_image_to_window(game->mlx, game->img_floor, game->player_x * \
		TILE_SIZE, game->player_y * TILE_SIZE);
	mlx_image_to_window(game->mlx, game->img_player, new_x * \
		TILE_SIZE, new_y * TILE_SIZE);
	game->player_x = new_x;
	game->player_y = new_y;
	game->moves++;
	ft_printf(CYAN"movements : %d\n"RESET, game->moves);
}

void	my_keyhook(mlx_key_data_t keydata, void *param)
{
	t_game	*game;

	game = (t_game *)param;
	if (keydata.action != MLX_PRESS)
		return ;
	if (keydata.key == MLX_KEY_W || keydata.key == MLX_KEY_UP)
		move_player(game, 0, -1);
	else if (keydata.key == MLX_KEY_S || keydata.key == MLX_KEY_DOWN)
		move_player(game, 0, 1);
	else if (keydata.key == MLX_KEY_A || keydata.key == MLX_KEY_LEFT)
		move_player(game, -1, 0);
	else if (keydata.key == MLX_KEY_D || keydata.key == MLX_KEY_RIGHT)
		move_player(game, 1, 0);
	else if (keydata.key == MLX_KEY_ESCAPE)
		end_game(game);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   load_rscs.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/21 07:21:46 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/25 18:17:43 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

mlx_image_t	*load_img(t_game *game, char *img_addr)
{
	game->texture = mlx_load_png(img_addr);
	if (!game->texture)
		return (0);
	game->image = mlx_texture_to_image(game->mlx, game->texture);
	mlx_delete_texture(game->texture);
	if (!game->image)
		return (0);
	return (game->image);
}

int	load_rscs(t_game *game)
{
	game->img_wall = load_img(game, RSCS_WALL);
	game->img_floor = load_img(game, RSCS_FLOOR);
	game->img_player = load_img(game, RSCS_PLAYER);
	game->img_door = load_img(game, RSCS_DOOR);
	game->img_collec = load_img(game, RSCS_COLLEC);
	if (!game->img_wall || !game->img_floor || !game->img_player || \
		!game->img_door || !game->img_collec)
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   free_and_print_error.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/18 11:47:01 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/25 17:38:56 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "so_long.h"

void	free_list(t_list *lines)
{
	t_list	*tmp;

	while (lines)
	{
		tmp = lines->next;
		free(lines);
		lines = tmp;
	}
}

void	free_map(char **map)
{
	int	i;

	i = 0;
	while (map[i])
	{
		free(map[i]);
		i++;
	}
	free(map);
	map = NULL;
}

void	free_image(t_game *game)
{
	if (game->img_wall)
		mlx_delete_image(game->mlx, game->img_wall);
	if (game->img_floor)
		mlx_delete_image(game->mlx, game->img_floor);
	if (game->img_player)
		mlx_delete_image(game->mlx, game->img_player);
	if (game->img_door)
		mlx_delete_image(game->mlx, game->img_door);
	if (game->img_collec)
		mlx_delete_image(game->mlx, game->img_collec);
}

void	free_map_print_error(char **map, t_list *lines, char *line, char *msj)
{
	if (lines)
		free_list(lines);
	if (line)
		free(line);
	if (map)
		free_map(map);
	if (msj)
	{
		ft_putstr_fd(RED, 2);
		ft_putstr_fd(msj, 2);
		ft_putstr_fd(RESET"\n", 2);
	}
	exit(1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   so_long.h                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: brturcio <brturcio@student.42angouleme.    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/03 15:56:11 by brturcio          #+#    #+#             */
/*   Updated: 2025/04/26 09:31:31 by brturcio         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef SO_LONG_H
# define SO_LONG_H

# include "MLX42/MLX42.h"
# include "libft.h"
# include <fcntl.h>
# include <unistd.h>
# include <stdlib.h>

//Colors
# define BLACK	"\033[0;30m"
# define RED	"\033[0;31m"
# define GREEN	"\033[0;32m"
# define YELLOW	"\033[0;33m"
# define BLUE	"\033[0;34m"
# define PURPLE	"\033[0;35m"
# define CYAN	"\033[0;36m"
# define WHITE	"\033[0;37m"
# define RESET	"\033[0m"

//size pixel
# define TILE_SIZE 32

//adress imgs
# define RSCS_WALL "rscs/wall.png"
# define RSCS_FLOOR "rscs/floor.png"
# define RSCS_PLAYER "rscs/player.png"
# define RSCS_DOOR "rscs/door.png"
# define RSCS_COLLEC "rscs/collectible.png"

typedef struct s_game
{
	mlx_t			*mlx;
	char			**map;
	int				width;
	int				height;
	int				map_rows;
	int				map_cols;
	int				player_x;
	int				player_y;
	int				coins;
	int				collected;
	int				moves;
	mlx_image_t		*img_wall;
	mlx_image_t		*img_floor;
	mlx_image_t		*img_player;
	mlx_image_t		*img_door;
	mlx_image_t		*img_collec;
	mlx_texture_t	*texture;
	mlx_image_t		*image;

}	t_game;

//chrck_args.c
int				check_file_extension(char *filename);
int				check_args(int ac, char **av);

//copy_map_for_flood.c
char			**copy_map(char **map);
void			flood_fill(char **map, int x, int y);
int				find_player(char **map, int *player_x, int *player_y);
int				has_remainig(char **map, char character);
int				verify_path(char **map);

//free.c
void			free_list(t_list *lines);
void			free_map(char **map);
void			free_map_print_error(char **map, t_list *lines, char *line, \
				char *msj);
void			free_image(t_game *game);

//init_game_utils.c
void			window_size(t_game *game, char **map);
int				count_collec(char **map);

//init_game
int				init_game(char **map, t_game *game);

//init_window
void			close_hook(void *param);
int				init_window(t_game *game);
void			end_game(t_game *game);

//key_movement.c
void			change_cell(t_game *game, int new_x, int new_y);
int				verify_end(t_game *game, char dest);
void			move_player(t_game *game, int dx, int dy);
void			my_keyhook(mlx_key_data_t keydata, void *param);

//load_texture.c
int				load_rscs(t_game *game);
mlx_image_t		*load_img(t_game *game, char *img_addr);

//map_validation.c
int				validate_size_lines_map(char **map);
int				validate_wall_map(char **map);
int				check_valid_chars(char **map);
void			check_required_elements(char **map, int *c, int *p, int *e);
int				validate_elements_map(char **map);

//read_map.c
int				open_map_file(char *filename);
t_list			*read_lines_into_list(int fd);
char			**convert_list_to_array(t_list *lines);
int				validate_map_not_empty(char **map);
char			**read_map(char *av);

//render_map.c
void			render_map2(t_game *game, char cel, int x, int y);
void			render_map(t_game *game);
void			search_player(t_game *game);

#endif
